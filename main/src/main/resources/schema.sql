DROP TABLE IF EXISTS users CASCADE;

DROP TABLE IF EXISTS categories CASCADE;

DROP TABLE IF EXISTS locations CASCADE;

DROP TABLE IF EXISTS events CASCADE;

DROP TABLE IF EXISTS event_states;

CREATE TABLE IF NOT EXISTS users
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name character varying(256) NOT NULL,
    email character varying(256) NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
    );

CREATE TABLE IF NOT EXISTS categories
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT categories_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS locations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    lat numeric NOT NULL,
    lon numeric NOT NULL,
    CONSTRAINT locations_pkey PRIMARY KEY (id),
    CONSTRAINT locations_lat_lon_key UNIQUE (lat, lon)
);

CREATE TABLE IF NOT EXISTS event_states
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    state text NOT NULL,
    CONSTRAINT event_states_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    annotation text NOT NULL,
    category_id bigint NOT NULL,
    description text NOT NULL,
    event_date timestamp without time zone NOT NULL,
    initiator_id bigint NOT NULL,
    location_id bigint NOT NULL,
    is_paid boolean DEFAULT FALSE,
    participiant_limit integer DEFAULT 0,
    published_date timestamp without time zone,
    is_moderated boolean NOT NULL,
    state_id bigint NOT NULL,
    title text NOT NULL,
    create_date timestamp without time zone NOT NULL,
    CONSTRAINT events_pkey PRIMARY KEY (id),
    CONSTRAINT events_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES categories (id),
    CONSTRAINT events_initiator_id_fkey FOREIGN KEY (initiator_id)
        REFERENCES users (id),
    CONSTRAINT events_location_id_fkey FOREIGN KEY (location_id)
        REFERENCES locations (id),
    CONSTRAINT events_state_id_fkey FOREIGN KEY (state_id)
        REFERENCES event_states (id)
);

